AWSTemplateFormatVersion: "2010-09-09"
Description: Create API Gateway, Lambda Function, KMS resources for building a Slack app/bot.

Parameters:
  ApiGatewayStageName:
    Description: Stage name of the API Gateway
    Type: String
    AllowedPattern: ^[a-z0-9]+$
    Default: v1
  AppCodeName:
    Description: App name (in lower case e.g. slack-app)
    Type: String
  ArtifactsBucketName:
    Description: Name of your S3 bucket that holds the lambda zip file
    Type: String
  BucketNameRandomKey:
    Description: Addition part appending to bucket name
    Type: String
  KeyAdminRoleArn:
    Description: The ARN of a role managing kms keys
    Type: String
  LambdaFunctionAsyncWorkerPackage:
    Description: Name of lambda zip file including .zip e.g "functions.zip"
    Type: String
    Default: slack_app_async_worker.zip
  LambdaFunctionImmediateResponsePackage:
    Description: Name of lambda zip file including .zip e.g "functions.zip"
    Type: String
    Default: slack_app_immediate_response.zip
  LambdaFunctionSyncWorkerPackage:
    Description: Name of lambda zip file including .zip e.g "functions.zip"
    Type: String
    Default: slack_app_sync_worker.zip
  LogRetention:
    Description: Days to keep application logs
    Type: Number
    Default: 1
  SlackAppTokenParameterKey:
    Description: Key of the parameter storing the Slack App token in the Parameter Store
    Type: String
    Default: /apps/slack_app/xxx/token

Resources:
  LogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AppCodeName}-logs-${BucketNameRandomKey}
      AccessControl: LogDeliveryWrite
      LifecycleConfiguration:
        Rules:
          - Id: DeleteContentAfter14Days
            Status: Enabled
            ExpirationInDays: 7
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  LogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LogsBucket
      PolicyDocument:
        Statement:
          - Sid: Prevent Accidental Bucket Deletion
            Effect: Deny
            Principal: "*"
            Action: s3:DeleteBucket
            Resource:
              - !Sub arn:aws:s3:::${LogsBucket}

  ## Lambda role and function - Worker
  LambdaRoleWorker:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-Worker-ExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-Worker-ExecutionRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - xray:Put*
                Resource: "*"

  LambdaFunctionAsyncWorker:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-Async-Worker
      Handler: slack_app_async_worker.lambda_handler
      Runtime: python3.8
      MemorySize: 1024
      Timeout: 900
      Code:
        S3Bucket: !Ref ArtifactsBucketName
        S3Key: !Ref LambdaFunctionAsyncWorkerPackage
        #ZipFile: |
        #  def lambda_handler(event, context):
        #      # This function will be updated through CI/CD
        #      return "Hello from Lambda!"
      Role: !GetAtt LambdaRoleWorker.Arn
      TracingConfig:
        Mode: Active
  LogGroupLambdaFunctionAsyncWorker:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ["/", ["/aws/lambda", !Ref LambdaFunctionAsyncWorker]]
      RetentionInDays: !Ref LogRetention

  LambdaFunctionSyncWorker:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-Sync-Worker
      Handler: slack_app_sync_worker.lambda_handler
      Runtime: python3.8
      MemorySize: 1024
      Timeout: 900
      Code:
        S3Bucket: !Ref ArtifactsBucketName
        S3Key: !Ref LambdaFunctionSyncWorkerPackage
        #ZipFile: |
        #  def lambda_handler(event, context):
        #      # This function will be updated through CI/CD
        #      return "Hello from Lambda!"
      Role: !GetAtt LambdaRoleWorker.Arn
      TracingConfig:
        Mode: Active
  LogGroupLambdaFunctionSyncWorker:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ["/", ["/aws/lambda", !Ref LambdaFunctionSyncWorker]]
      RetentionInDays: !Ref LogRetention

  ## Lambda role and function - Immediate Response
  LambdaRoleImmediateResponse:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-ImmediateResponse-ExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-ExecutionRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:InvokeAsync
                Resource:
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-Async-Worker
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-Sync-Worker
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:DescribeKey
                  - kms:GenerateDataKey*
                Resource:
                  - !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/${AppCodeName}
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource:
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${SlackAppTokenParameterKey}
              - Effect: Allow
                Action:
                  - xray:Put*
                Resource: "*"

  KmsKey:
    Type: AWS::KMS::Key
    DeletionPolicy: Delete
    Properties:
      EnableKeyRotation: True
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource: "*"
          - Sid: Allow access for Key Administrators
            Effect: Allow
            Principal:
              AWS: !Ref KeyAdminRoleArn
            Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:TagResource
              - kms:UntagResource
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
            Resource: "*"
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS:
                - !GetAtt LambdaRoleImmediateResponse.Arn
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: "*"
          - Sid: Allow attachment of persistent resources
            Effect: Allow
            Principal:
              AWS: !Ref KeyAdminRoleArn
            Action:
              - kms:CreateGrant
              - kms:ListGrants
              - kms:RevokeGrant
            Resource: '*'
            Condition:
              Bool:
                kms:GrantIsForAWSResource: 'true'

  KmsAlias:
    Type: AWS::KMS::Alias
    DependsOn: KmsKey
    DeletionPolicy: Delete
    Properties:
      AliasName: !Sub alias/${AppCodeName}
      TargetKeyId: !Ref KmsKey

  LambdaFunctionImmediateResponse:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ImmediateResponse
      Handler: slack_app_immediate_response.lambda_handler
      Runtime: python3.8
      MemorySize: 1024
      Timeout: 900
      Code:
        S3Bucket: !Ref ArtifactsBucketName
        S3Key: !Ref LambdaFunctionImmediateResponsePackage
        #ZipFile: |
        #  def lambda_handler(event, context):
        #      # This function will be updated through CI/CD
        #      return "Hello from Lambda!"
      Role: !GetAtt LambdaRoleImmediateResponse.Arn
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          AsyncWorkerLambdaFunctionName: !Ref LambdaFunctionAsyncWorker
          SyncWorkerLambdaFunctionName: !Ref LambdaFunctionSyncWorker
          SlackAppTokenParameterKey: !Ref SlackAppTokenParameterKey
      #KmsKeyArn: !GetAtt KmsKey.Arn
  LogGroupLambdaFunctionImmediateResponse:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ["/", ["/aws/lambda", !Ref LambdaFunctionImmediateResponse]]
      RetentionInDays: !Ref LogRetention

  ## API Gateway
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${AWS::StackName}-API
      ApiKeySourceType: HEADER
      Description: !Sub API for ${AppCodeName}

  LookupResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestApi.RootResourceId
      RestApiId: !Ref RestApi
      PathPart: "lookup"

  LookupMethodAny:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref LookupResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunctionImmediateResponse.Arn}/invocations"
        IntegrationResponses:
          - ResponseTemplates:
              application/json: ""
            StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - LookupMethodAny
    Properties:
      RestApiId: !Ref RestApi

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    DependsOn:
      - LookupMethodAny
    Properties:
      RestApiId: !Ref RestApi
      StageName: !Ref ApiGatewayStageName
      DeploymentId: !Ref ApiGatewayDeployment
      TracingEnabled: true

  LambdaLookupMethodAnyGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunctionImmediateResponse.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*"

Outputs:
  ApigEndpoint:
    Description: API Gateway endpoint
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayStageName}"
